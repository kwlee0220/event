apply plugin: 'groovy'
apply plugin: 'maven'

group = 'etri'
version = '1.0'

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

ext.mvel2_version = '2.4.0.Final'
ext.groovy_version = '2.4.12'
ext.commons_beanutils_version = '1.9.3'
dependencies {
	compile project(":utils")
	
	compile "org.mvel:mvel2:${mvel2_version}"
	compile "org.codehaus.groovy:groovy:${groovy_version}"
	compile "commons-beanutils:commons-beanutils:${commons_beanutils_version}"
	
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}